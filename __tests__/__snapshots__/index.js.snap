exports[`protobuf-loader should load compiled .proto file 1`] = `
"/* 
        syntax = \"proto2\";

        message test {
            message item {
                required int32 id = 1;
                required string name = 4;
            }

            repeated item item = 1;
            required int32 state = 2;
        }
         */
\'use strict\'; // code generated by pbf v3.0.5

// test ========================================

var test = exports.test = {};

test.read = function (pbf, end) {
    return pbf.readFields(test._readField, {item: [], state: 0}, end);
};
test._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.item.push(test.item.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 2) obj.state = pbf.readVarint(true);
};
test.write = function (obj, pbf) {
    if (obj.item) for (var i = 0; i < obj.item.length; i++) pbf.writeMessage(1, test.item.write, obj.item[i]);
    if (obj.state) pbf.writeVarintField(2, obj.state);
};

// test.item ========================================

test.item = {};

test.item.read = function (pbf, end) {
    return pbf.readFields(test.item._readField, {id: 0, name: \"\"}, end);
};
test.item._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint(true);
    else if (tag === 4) obj.name = pbf.readString();
};
test.item.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.name) pbf.writeStringField(4, obj.name);
};

"
`;
